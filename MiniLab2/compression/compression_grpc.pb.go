// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package compression

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompressionClient is the client API for Compression service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompressionClient interface {
	CompressFile(ctx context.Context, in *CompressionRequest, opts ...grpc.CallOption) (*CompressionResponse, error)
}

type compressionClient struct {
	cc grpc.ClientConnInterface
}

func NewCompressionClient(cc grpc.ClientConnInterface) CompressionClient {
	return &compressionClient{cc}
}

func (c *compressionClient) CompressFile(ctx context.Context, in *CompressionRequest, opts ...grpc.CallOption) (*CompressionResponse, error) {
	out := new(CompressionResponse)
	err := c.cc.Invoke(ctx, "/compression.Compression/CompressFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompressionServer is the server API for Compression service.
// All implementations must embed UnimplementedCompressionServer
// for forward compatibility
type CompressionServer interface {
	CompressFile(context.Context, *CompressionRequest) (*CompressionResponse, error)
	mustEmbedUnimplementedCompressionServer()
}

// UnimplementedCompressionServer must be embedded to have forward compatible implementations.
type UnimplementedCompressionServer struct {
}

func (UnimplementedCompressionServer) CompressFile(context.Context, *CompressionRequest) (*CompressionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompressFile not implemented")
}
func (UnimplementedCompressionServer) mustEmbedUnimplementedCompressionServer() {}

// UnsafeCompressionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompressionServer will
// result in compilation errors.
type UnsafeCompressionServer interface {
	mustEmbedUnimplementedCompressionServer()
}

func RegisterCompressionServer(s grpc.ServiceRegistrar, srv CompressionServer) {
	s.RegisterService(&Compression_ServiceDesc, srv)
}

func _Compression_CompressFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompressionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompressionServer).CompressFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compression.Compression/CompressFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompressionServer).CompressFile(ctx, req.(*CompressionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Compression_ServiceDesc is the grpc.ServiceDesc for Compression service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Compression_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "compression.Compression",
	HandlerType: (*CompressionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CompressFile",
			Handler:    _Compression_CompressFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "compression/compression.proto",
}
